from sklearn.feature_selection import SelectKBest
import numpy as np
from sklearn import cross_validation
from sklearn.ensemble import RandomForestClassifier
import neurolab as nl


def main():
    inp = open('C:/Users/Abhi/workspace/MalwareClassification/ASMTRAINFULLDATA.csv','r')
    trainData = inp.readlines()
    trainData = trainData[2:]
    td=[]
    print len(trainData)
    for line in trainData:
        td.append(line.split(','))
    out = []    
    #print len(td[2])
    for i in range(len(td)):
        out.append(float(td[i][1])/10)
        td[i] = td[i][2:-1]
        for j in range(len(td[0])):
            td[i][j] = float(td[i][j])
    
    '''for i in range(len(td)):
        nConstant = sum(td[i])
        for j in range(len(td[0])):
            td[i][j] =td[i][j]/nConstant
            
    '''
    #print td[0]        
            
    #print len(td[0])
    clf = SelectKBest(k=100)
    b = clf.fit_transform(td,out)
    j =clf.get_support(indices =True)
    #print j
    for k in range(len(j)):
        j[k] =j[k]+1
    print j
    '''print len(b), len(b[0])
    k=0
    for pt in out:
        print pt
        if pt ==5:
            k+=1
    print k'''
        
    
    '''c=0
    #print b
    X_train, X_test, y_train, y_test = cross_validation.train_test_split(b, out, test_size=0.4, random_state=0)
    #print type(X_train[0][0])
    #print type(y_train)
    X_train = np.array(X_test)
    newnet = nl.load('commands100.net')
    ans = newnet.sim(X_train)
    #print ans
    roundans=[]
    for i in range(len(ans)):
        if round(ans[i][0],3) <= 0.15:
            roundans.append(0.1)
        elif round(ans[i][0],3) <= 0.25:
            roundans.append(0.2)
        elif round(ans[i][0],3) <= 0.35:
            roundans.append(0.3)
        elif round(ans[i][0],3) <= 0.45:
            roundans.append(0.4)
        elif round(ans[i][0],3) <= 0.55:
            roundans.append(0.5)
        elif round(ans[i][0],3) <= 0.65:
            roundans.append(0.6)
        elif round(ans[i][0],3) <= 0.75:
            roundans.append(0.7)
        elif round(ans[i][0],3) <= 0.85:
            roundans.append(0.8)
        elif round(ans[i][0],3) <= 0.95:
            roundans.append(0.9)
        else:
            roundans.append(0.0)

    #roundans = np.array(roundans)
    #roundans = roundans.reshape(len(roundans),1)

    
    '''
    '''inp3 = [list(i) for i in zip(*X_train)]
    print type(inp3[0][0])
    neuinp = []
    for item in inp3:
        neuinp.append([-0.5,0.5])
    X_train = np.array(X_train)
    y_train = np.array(y_train)
    print type(X_train[0][0])
    print type(y_train[0])
    tar = y_train.reshape(len(y_train),1)    
    net = nl.net.newff(neuinp,[10,1])
    print net.ci
    print net.co
    print len(net.layers)
    
    error = net.train(X_train,tar,epochs=1200,show=100,goal=0.1)
    net.save("commands100.net")'''
    '''gh = RandomForestClassifier()
    gh =gh.fit(X_train, y_train)
    print gh.score(X_test,y_test)
    #k = clf.transform(td)'''
    '''for i in range(len(b)):
        for j in range(len(b[0])):
            if b[i][j] == k[i][j]:
                c+=1
    print c'''           
    #print len(b), len(b[0])
    #print len(k), len(k[0])
    #calculateError(roundans, y_test)
def calculateError(simoutput,output):
    #err=0
    classified=0
    notclassified =0
    for i in range(len(simoutput)):
        if simoutput[i] == output[i]:
            classified += 1
        else:
            notclassified +=1 
    #err = err/len(simoutput)
    #print err'''
    print classified
    print notclassified

if __name__ == '__main__':
    main()
        