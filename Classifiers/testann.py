import numpy as np
import neurolab as nl
import math

def main():  
    featureFile = open('C:/Users/Abhi/workspace/MalwareClassification/asmFeatures.csv', 'r')
    inp = featureFile.readlines()
    inp1=[]
    out=[]
    for line in inp:
        inp1.append(line.split(","))
    #print inp1[10868]
    inp1 = inp1[1:]
    for i in range(len(inp1)):
        out.append(float(inp1[i][42])/10)
        inp1[i] = inp1[i][0:-2]
                
    for i in range(len(inp1)):
        for j in range (len(inp1[0])):
            inp1[i][j] = float(inp1[i][j])
     
    for i in range(len(inp1)):
        nConstant = sum(inp1[i])
        for j in range (len(inp1[0])):
            inp1[i][j] = inp1[i][j]/nConstant
    
    #print len(inp1)
    #print out
    
    inp2 = np.array(inp1)
    out2 = np.array(out)
    tar = out2.reshape(len(out2),1)
    
    #print inp2
    #print len(inp2[0])
    #print tar
    #print len(inp2)
    #print len(tar)'''
    '''okCount=0
    notokCount=0
    for item in inp2:
        if sum(item)> 0.99:
            okCount += 1
        else:
            notokCount +=1
    print okCount
    print notokCount'''

    newnet = nl.load('classify4.net')
    print "fine"
    roundans=[]
    ans = newnet.sim(inp2)
    for i in range(len(ans)):
        if round(ans[i][0],3) <= 0.15:
            roundans.append(0.1)
        elif round(ans[i][0],3) <= 0.25:
            roundans.append(0.2)
        elif round(ans[i][0],3) <= 0.35:
            roundans.append(0.3)
        elif round(ans[i][0],3) <= 0.45:
            roundans.append(0.4)
        elif round(ans[i][0],3) <= 0.55:
            roundans.append(0.5)
        elif round(ans[i][0],3) <= 0.65:
            roundans.append(0.6)
        elif round(ans[i][0],3) <= 0.75:
            roundans.append(0.7)
        elif round(ans[i][0],3) <= 0.85:
            roundans.append(0.8)
        elif round(ans[i][0],3) <= 0.95:
            roundans.append(0.9)
        else:
            roundans.append(0.0)

    roundans = np.array(roundans)
    roundans = roundans.reshape(len(roundans),1)

    calculateError(roundans,tar)

    
def calculateError(simoutput,output):
    err=0
    classified=0
    notclassified =0
    for i in range(len(simoutput)):
        err += math.pow((simoutput[i][0]- output[i][0]),2)
        if simoutput[i][0] == output[i][0]:
            classified += 1
        else:
            notclassified +=1 
    err = err/len(simoutput)
    print err
    print classified
    print notclassified 
if __name__ == "__main__":
    main()
