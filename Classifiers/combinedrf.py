from sklearn.ensemble import RandomForestClassifier
from sklearn import tree
import numpy as np
import cPickle

def main():  
    featureFile = open('C:/Users/Abhi/Desktop/ASMTRAINFULLDATA.csv', 'r')
    gramFile = open('C:/Users/Abhi/workspace/MalwareClassification/3gramsTrain.csv', 'r')    
    inp = featureFile.readlines()
    graminp = gramFile.readlines()
    inp = inp[1:]
    graminp = graminp[1:] 
    #print inp[2]
    #print graminp[1]
    inp1 = [] 
    out = []
    inp2 = []
    inp3 =[]
    for line in inp:
        inp1.append(line.split(","))
    for dcv in graminp:
        inp2.append(dcv.split(","))
    cMatrix=[]
    for i in range(len(inp1)):
        cMatrix.append(inp1[i]+inp2[i][1:-1])         
        
    for i in range(len(cMatrix)):
        inp3.append(cMatrix[i][2:])
        out.append(int(cMatrix[i][1]))
    #print len(inp3[0])
    for i in range(len(inp3)):
        for j in range(len(inp3[0])):
            inp3[i][j]= int(inp3[i][j])
    print len(out)
    
    #inp1 = np.array(inp1)
    #print out
    #print len(inp1), len(inp1[0]), inp1[0][2998],'hi'
    #print inp1
    
    '''for i in range(len(inp1)):
        for j in range (len(inp1[0])):
            inp1[i][j] = int(inp1[i][j])
    '''
    '''for i in range(len(inp1)):
        nConstant = sum(inp1[i])
        for j in range (len(inp1[0])):
            inp1[i][j] = inp1[i][j]/nConstant'''
    
    #print sum(inp1[0])
    #inputset = inp1[:-3000]
    #cvset = inp1[7867:]
    #outCVset = out[7867:]
    #outputset = out[:-3000]         
    '''inp2 = np.array(inp1)
    out2 = np.array(out)'''
    #print inp2
    #print len(out2)
    #tar = out2.reshape(len(out2),1)
    #print len(inp2)
    #print len(tar),tar
    
    '''okCount=0
    notokCount=0
    for item in inp2:
        if sum(item)> 0.99:
            okCount += 1
        else:
            notokCount +=1
    print okCount
    print notokCount
    '''

    clf = RandomForestClassifier(n_estimators= 10000)
    clf = clf.fit(inp3, out)
    with open('comrf', 'wb') as f:
        cPickle.dump(clf, f)
    print "network trained"
    
    '''with open('comrf', 'rb') as f:
        rf = cPickle.load(f)
    preds = rf.predict(inp3)
    
    #print preds
    calculateError(preds, out)'''
def calculateError(simoutput,output):
    #err=0
    classified=0
    notclassified =0
    for i in range(len(simoutput)):
        if simoutput[i] == output[i]:
            classified += 1
        else:
            notclassified +=1 
    #err = err/len(simoutput)
    #print err'''
    print classified
    print notclassified

if __name__ =='__main__':
    main()