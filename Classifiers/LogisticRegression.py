from sklearn.linear_model import LogisticRegression 
import numpy as np
import cPickle

def main():  
    featureFile = open('C:/Users/Abhi/workspace/MalwareClassification/asmFeatures.csv', 'r')    
    inp = featureFile.readlines()
    
    #print inp[1]
    #print inp[29]
    inp1=[]
    out=[]
    for line in inp:
        inp1.append(line.split(","))
    #print inp1[10868]
    inp1 = inp1[1:]
    for i in range(len(inp1)):
        #print float(inp1[i][42])
        out.append(int(inp1[i][42]))
        inp1[i] = inp1[i][0:-2]
                
    for i in range(len(inp1)):
        for j in range (len(inp1[0])):
            inp1[i][j] = int(inp1[i][j])
     
    '''for i in range(len(inp1)):
        nConstant = sum(inp1[i])
        for j in range (len(inp1[0])):
            inp1[i][j] = inp1[i][j]/nConstant'''
     
    #print sum(inp1[0])        
    inp2 = np.array(inp1)
    out2 = np.array(out)
    print inp2
    print out2
    #tar = out2.reshape(len(out2),1)
    #print len(inp2)
    #print len(tar),tar
    '''okCount=0
    notokCount=0
    for item in inp2:
        if sum(item)> 0.99:
            okCount += 1
        else:
            notokCount +=1
    print okCount
    print notokCount'''

    clf = LogisticRegression()
    clf = clf.fit(inp2, out2)
    with open('LR', 'wb') as f:
        cPickle.dump(clf, f)
    print "network trained"
    '''#pred = clf.predict(inp2)
    with open('LR', 'rb') as f:
        rf = cPickle.load(f)
    preds = rf.predict(inp2)
    #preds = clf.predict(inp2)
    #print preds
    calculateError(preds, out2)'''
def calculateError(simoutput,output):
    #err=0
    classified=0
    notclassified =0
    for i in range(len(simoutput)):
        if simoutput[i] == output[i]:
            classified += 1
        else:
            notclassified +=1 
    #err = err/len(simoutput)
    #print err'''
    print classified
    print notclassified

if __name__ =='__main__':
    main()