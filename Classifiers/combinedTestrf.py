from sklearn.ensemble import RandomForestClassifier
from sklearn import tree
import numpy as np
import cPickle

def main():  
    featureFile = open('C:/Users/Abhi/Desktop/ASMTESTFEATURES1.csv', 'r')
    gramFile = open('C:/Users/Abhi/workspace/MalwareClassification/3gramsTest.csv', 'r')    
    inp = featureFile.readlines()
    graminp = gramFile.readlines()
    inp = inp[1:]
    graminp = graminp[1:] 
    #print inp[0]
    #print graminp[0]
    '''count = 0
    for i in range(len(inp)):
        if inp[i][0] == graminp[i][0]:
            count +=1
    print count
    '''         
    inp1 = [] 
    out = []
    inp2 = []
    inp3 =[]
    for line in inp:
        inp1.append(line.split(","))
    for dcv in graminp:
        inp2.append(dcv.split(","))
    cMatrix=[]
    labels=[]
    for i in range(len(inp1)):
        cMatrix.append(inp1[i]+inp2[i][1:])
    #print cMatrix[1][0]         
    for k in range(len(cMatrix)):
        labels.append(cMatrix[k][0])
        
    for i in range(len(cMatrix)):
        inp3.append(cMatrix[i][1:])
        #out.append(int(cMatrix[i][1]))
    #print len(inp3[0])
    for i in range(len(inp3)):
        for j in range(len(inp3[0])):
            inp3[i][j]= int(inp3[i][j])
            
    #print len(inp3), len(inp3[0])
    #inp2 = np.array(inp1)
    #print inp2
    
    with open('comrf', 'rb') as f:
        rf = cPickle.load(f)
    ans = rf.predict_proba(inp3)
    #print ans
    #print len(ans),len(labels)
    printprobs(labels,ans)
def printprobs(testlabels,probs):
    outputfile = open('C:/Users/Abhi/workspace/MalwareClassification/probs5.csv', 'w')
    outputfile.write('Id'+','+'Prediction1'+','+'Prediction2'+','+'Prediction3'+','+'Prediction4'+','+'Prediction5'+','+'Prediction6'+','+'Prediction7'+','+'Prediction8'+','+'Prediction9'+'\n')
    for i in range(len(probs)):
        outputfile.write(testlabels[i]+','+str(probs[i][0])+','+str(probs[i][1])+','+str(probs[i][2])+','+str(probs[i][3])+','+str(probs[i][4])+','+str(probs[i][5])+','+str(probs[i][6])+','+str(probs[i][7])+','+str(probs[i][8])+'\n')
  


if __name__ == '__main__':
    main()

