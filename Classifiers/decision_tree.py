#from sklearn.ensemble import RandomForestClassifier
from sklearn import tree
import numpy as np
import cPickle
from sklearn import cross_validation

def main():  
    featureFile = open('C:/Users/Abhi/workspace/MalwareClassification/ASMTRAINFULLDATA.csv', 'r')    
    trainData = featureFile.readlines()
    
 
    trainData = trainData[2:]
    td=[]
    #print len(trainData)
    for line in trainData:
        td.append(line.split(','))
    out = []    
    #print len(td[2])
    for i in range(len(td)):
        out.append(int(td[i][1]))
        td[i] = td[i][2:-1]
        for j in range(len(td[0])):
            td[i][j] = int(td[i][j])
    #print len(out)
            
    X_train, X_test, y_train, y_test = cross_validation.train_test_split(td, out, test_size=0.4, random_state=0)
    
    #print len(X_train),len(X_train[0]), len(X_test),len(X_test[0]), len(y_train),len(y_test),type(X_train[0][0]),type(X_test[0][0])
    '''clf = tree.DecisionTreeClassifier()
    gh = clf.fit(X_train, y_train)
    with open('dectree', 'wb') as f:
        cPickle.dump(gh, f)
    print "network trained"'''
    
    with open('dectree', 'rb') as f:
        rf = cPickle.load(f)
    preds = rf.predict(X_train)
    
    #print preds
    calculateError(preds, y_train)
def calculateError(simoutput,output):
    #err=0
    classified=0
    notclassified =0
    for i in range(len(simoutput)):
        if simoutput[i] == output[i]:
            classified += 1
        else:
            notclassified +=1 
    #err = err/len(simoutput)
    #print err'''
    print classified
    print notclassified

if __name__ =='__main__':
    main()